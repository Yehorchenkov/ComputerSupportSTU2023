---
title: "Subsetting"
institute: "Department of Spatial Planning"
author: "Dr.Sc. Oleksii Yehorchenkov"
format:
    revealjs:
        transition: none
        slide-number: true
        theme: default
        revealjs-plugins:
        - pdfexport
title-slide-attributes:
    data-background-image: images/STU-anfh_full.png
    data-background-size: 40%
    data-background-position: 2% 2%
---

## Subsetting

There are a number of operators that can be used to extract subsets of R objects.

- `[` always returns an object of the same class as the original; can be used to select more than one element (there is one exception)
- `[[` is used to extract elements of a list or a data frame; it can only be used to extract a single element and the class of the returned object will not necessarily be a list or data frame
- `$` is used to extract elements of a list or data frame by name; semantics are similar to that of `[[`.

## Subsetting

```{r}
#| echo: true

x <- c("a", "b", "c", "c", "d", "a")

x[1]
x[2]
x[1:4]
x[x > "a"]
u <- x > "a"
u
x[u]
```

## Subsetting a Matrix

:::: {.columns}
::: {.column}

Matrices can be subsetted in the usual way with `(i,j)` type indices.

```{r}
#| echo: true

x <- matrix(1:6, 2, 3)

x
x[1, 2]
x[2, 1]

```

:::
::: {.column}

Indices can also be missing.

```{r}
#| echo: true

x[1, ]
x[, 2]
```
:::
::::

## Subsetting a Matrix

By default, when a single element of a matrix is retrieved, it is returned as a vector of length **1** rather than a **1 Ã— 1 matrix**. This behavior can be turned off by setting `drop = FALSE`.

```{r}
#| echo: true

x <- matrix(1:6, 2, 3)

x[1, 2]
x[1, 2, drop = FALSE]

```

## Subsetting a Matrix

Similarly, subsetting a single column or a single row will give you a vector, not a matrix (by default).

```{r}
#| echo: true

x <- matrix(1:6, 2, 3)

x[1, ]
x[1, , drop = FALSE]
```

## Subsetting Lists

```{r}
#| echo: true

x <- list(foo = 1:4, bar = 0.6)

x[1]
x[[1]]
x$bar
x[["bar"]]
x["bar"]
```

## Subsetting Lists

```{r}
#| echo: true

x <- list(foo = 1:4, bar = 0.6, baz = "hello")

x[c(1, 3)]

```

## Subsetting Lists

The `[[` operator can be used with computed indices; `$` can only be used with literal names.

```{r}
#| echo: true

x <- list(foo = 1:4, bar = 0.6, baz = "hello")
name <- "foo"

x[[name]]
x$name
x$foo
```

## Subsetting Nested Elements of a List

The `[[` can take an integer sequence.

```{r}
#| echo: true

x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))

x[[c(2, 1)]]
x[[2]][2]
x$b[2]

x[[c(1, 3)]]
x[[1]][[3]]
```

## Partial Matching

Partial matching of names is allowed with `[[` and `$`.


```{r}
#| echo: true

x <- list(aardvark = 1:5)

x$a

x["a"]
x[["a", exact = FALSE]]
```

## Removing NA Values

A common task is to remove missing values (NAs).

```{r}
#| echo: true

x <- c(1, 2, NA, 4, NA, 5)

bad <- is.na(x)
bad
x[!bad]
```

## Removing NA Values

What if there are multiple things and you want to take the subset with no missing values?

```{r}
#| echo: true

x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x, y)

good
x[good]
y[good]
```

## Removing NA Values

```{r}
#| echo: true

library(tidyr)

airquality[1:6, ]

airquality[1:6, ] |> drop_na()
```
