---
title: "Data Types in R"
institute: "Department of Spatial Planning"
author: "Dr.Sc. Oleksii Yehorchenkov"
format:
    revealjs:
        transition: none
        slide-number: true
        theme: default
        revealjs-plugins:
        - pdfexport
title-slide-attributes:
    data-background-image: images/STU-anfh_full.png
    data-background-size: 40%
    data-background-position: 2% 2%
---

## Objects {.smaller}

R has five basic or “atomic” classes of objects:

- character
- numeric (real numbers)
- integer
- complex
- logical (True/False)

The most basic object is a **vector**

A vector can only contain objects of the same class
BUT: The one exception is a list, which is represented as a vector but can contain objects of different classes (indeed, that’s usually why we use them)

Empty vectors can be created with the `vector()` function.

## Numbers {.smaller}

- Numbers in R a generally treated as numeric objects (i.e. double precision real numbers)
- If you explicitly want an integer, you need to specify the `L` suffix
- Ex: Entering 1 gives you a numeric object; entering `1L` explicitly gives you an integer.
- There is also a special number `Inf` which represents infinity; e.g. `1 / 0`; 
`Inf` can be used in ordinary calculations; e.g. `1 / Inf` is `0`
- The value `NaN` represents an undefined value (“not a number”); e.g. `0 / 0`;
`NaN` can also be thought of as a missing value (more on that later).

## Attributes

R objects can have **attributes**

- names, dimnames;
- dimensions (e.g. matrices, arrays);
- class;
- length;
- other user-defined attributes/metadata;

Attributes of an object can be accessed using the `attributes()` function.

## Entering Input

```{r}
#| echo: true

x <- 1
print(x)
x

msg <- "hello"
msg

```

The grammar of the language determines whether an expression is complete or not.

```r
x <-  ## Incomplete expression
```

The `#` character indicates a comment. Anything to the right of the # (including the # itself) is ignored.

## Evaluation

When a complete expression is entered at the prompt, it is evaluated and the result of the evaluated expression is returned. The result may be auto-printed.

```{r}
#| echo: true

x <- 5  ## nothing printed
x       ## auto-printing occurs
print(x)  ## explicit printing
```

The `[1]` indicates that `x` is a vector and `5` is the first element.

## Printing

```{r}
#| echo: true

x <- 1:100
x
```

The `:` operator is used to create integer sequences.

## Creating Vectors

The `c()` function can be used to create vectors of objects.

```r
x <- c(0.5, 0.6)       ## numeric
x <- c(TRUE, FALSE)    ## logical
x <- c(T, F)           ## logical
x <- c("a", "b", "c")  ## character
x <- 9:29              ## integer
x <- c(1+0i, 2+4i)     ## complex
```

Using the `vector()` function

```{r}
#| echo: true

x <- vector("numeric", length = 10)
x
```

## Mixing Objects

What about the following?

```{r}
#| echo: true

y1 <- c(1.7, "a")   ## character
y2 <- c(TRUE, 2)    ## numeric
y3 <- c("3", TRUE)    ## character
```

```{r}
y1
y2
y3
```

When different objects are mixed in a vector, coercion occurs so that every element in the vector is of the same class.

## Explicit Coercion

Objects can be explicitly coerced from one class to another using the as.* functions, if available.

```{r}
#| echo: true

x <- 0:10
class(x)

as.numeric(x)

as.logical(x)

as.character(x)
```

## Explicit Coercion

Nonsensical coercion results in **NAs** (Not Available).

```{r}
#| echo: true
#| warning: true

x <- c("a", "b", "c")
as.numeric(x)

as.logical(x)

as.complex(x)
```

## Matrices

Matrices are vectors with a dimension attribute. The dimension attribute is itself an integer vector of length 2 (**nrow, ncol**)

```{r}
#| echo: true

m <- matrix(nrow = 2, ncol = 3)
m

dim(m)

attributes(m)
```

## Matrices (cont’d)

Matrices are constructed column-wise, so entries can be thought of starting in the “upper left” corner and running down the columns.

```{r}
#| echo: true

m <- matrix(1:6, nrow = 2, ncol = 3)
m
```

## Matrices (cont’d)

Matrices can also be created directly from vectors by adding a **dimension attribute**.

```{r}
#| echo: true

m <- 1:10
m

dim(m) <- c(2,5)
m
```

## cbind-ing and rbind-ing

Matrices can be created by column-binding or row-binding with `cbind()` and `rbind()`.

```{r}
#| echo: true

x <- 1:5
y <- 6:10

cbind(x, y)

rbind(x, y)
```

## Lists

**Lists** are a special type of vector that can contain elements of different classes. **Lists** are a very important data type in R and you should get to know them well.

```{r}
#| echo: true

x <- list(1, "a", TRUE, 1 + 4i)
x
```

## Factors

**Factors** are used to represent categorical data. **Factors** can be *unordered* or *ordered*. One can think of a factor as an integer vector where each integer has a label.

- Factors are treated specially by modelling functions like `lm()` and `glm()`
- Using factors with labels is better than using integers because factors are self-describing; having a variable that has values `“Male”` and `“Female”` is better than a variable that has values `1` and `2`.

## Factors

```{r}
#| echo: true

x <- factor(c("yes", "yes", "no", "yes", "no"))
x

table(x)

unclass(x)

attr(x, "levels")
```

## Factors

The order of the levels can be set using the levels argument to `factor()`. This can be important in linear modelling because the first level is used as the baseline level.

```{r}
#| echo: true

x <- factor(c("yes", "yes", "no", "yes", "no"),
              levels = c("yes", "no"))
x
```

## Missing  Value {.smaller}

Missing values are denoted by `NA` or `NaN` for undefined mathematical operations.

```{r}
#| echo: true

x = 0 / 0
x
y = sqrt(-2)
y
```

but

```{r}
#| echo: true

x = 1 / 0
x
```

- `is.na()` is used to test objects if they are `NA`;
- `is.nan()` is used to test for `NaN`;
- `NA` values have a class also, so there are integer `NA`, character `NA`, etc.;
- A `NaN` value is also `NA` but the converse is not true

## Missing Value

```{r}
#| echo: true

x <- c(1, 2, NA, 10, 3)

is.na(x)

is.nan(x)

x <- c(1, 2, NaN, NA, 4)

is.na(x)

is.nan(x)
```

## Data Frames {.smaller}

Data frames are used to store tabular data

- They are represented as a special type of list where every element of the list has to have the same length;
- Each element of the list can be thought of as a column and the length of each element of the list is the number of rows;
- Unlike matrices, data frames can store different classes of objects in each column (just like lists); matrices must have every element be the same class;
- Data frames also have a special attribute called `row.names`;
- Data frames are usually created by calling functions like `read.table()` or `read.csv()`;
Can be converted to a matrix by calling `data.matrix()`.

## Data Frames

```{r}
#| echo: true

x <- data.frame(foo = 1:4, bar = c(T, T, F, F)) 

x

nrow(x)

ncol(x)
```

## Names

R objects can also have names, which is very useful for writing readable code and self-describing objects.

```{r}
#| echo: true

x <- 1:3
names(x)

names(x) <- c("one", "two", "three")
x

names(x)
```

## Names

Lists can also have names.

```{r}
#| echo: true

x <- list(a = 1, b = 2, c = 3)
x
```

## Names

And matrices.

```{r}
#| echo: true

m <- matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a", "b"), c("c", "d"))

m
```

## Names

And data frames

```{r}
#| echo: true

head(mtcars)

names(mtcars)

row.names(mtcars)[1:10]
```


## Summary

Data Types

- atomic classes: numeric, logical, character, integer, complex
- vectors, lists
- factors
- missing values
- data frames
- names



